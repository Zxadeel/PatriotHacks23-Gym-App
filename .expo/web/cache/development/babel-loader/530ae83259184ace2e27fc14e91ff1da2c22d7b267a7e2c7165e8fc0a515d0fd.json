{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MuscleSelect = function MuscleSelect(_ref) {\n  var route = _ref.route;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedMuscles = _useState2[0],\n    setSelectedMuscles = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    confirmedMuscles = _useState4[0],\n    setConfirmedMuscles = _useState4[1];\n  var navigation = useNavigation();\n  var liftingLevel = route.params.liftingLevel;\n  var handleMuscleSelection = function handleMuscleSelection(muscle) {\n    setSelectedMuscles(function (prevState) {\n      if (prevState.includes(muscle)) {\n        return prevState.filter(function (item) {\n          return item !== muscle;\n        });\n      } else {\n        return [].concat(_toConsumableArray(prevState), [muscle]);\n      }\n    });\n  };\n  var handleConfirmation = function handleConfirmation() {\n    setConfirmedMuscles(_toConsumableArray(selectedMuscles));\n    setSelectedMuscles([]);\n    console.log('Confirmed Muscles:', selectedMuscles);\n    console.log('Lifting Level:', liftingLevel);\n    navigation.navigate('DaysScreen', {\n      selectedMuscles: selectedMuscles,\n      liftingLevel: liftingLevel\n    });\n  };\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: [_jsx(Text, {\n      children: \"Select the muscles you want to grow:\"\n    }), _jsx(Image, {\n      source: require(\"../../assets/mmimwithback.png\"),\n      style: {\n        width: '50%',\n        height: '50%'\n      },\n      resizeMode: \"contain\"\n    }), _jsxs(View, {\n      children: [_jsx(Button, {\n        title: \"Chest\",\n        onPress: function onPress() {\n          return handleMuscleSelection('Chest');\n        },\n        color: selectedMuscles.includes('Chest') ? 'steelblue' : 'blue'\n      }), _jsx(Button, {\n        title: \"Back\",\n        onPress: function onPress() {\n          return handleMuscleSelection('Back');\n        },\n        color: selectedMuscles.includes('Back') ? 'steelblue' : 'darkolivegreen'\n      }), _jsx(Button, {\n        title: \"Biceps\",\n        onPress: function onPress() {\n          return handleMuscleSelection('Biceps');\n        },\n        color: selectedMuscles.includes('Biceps') ? 'steelblue' : 'purple'\n      }), _jsx(Button, {\n        title: \"Triceps\",\n        onPress: function onPress() {\n          return handleMuscleSelection('Triceps');\n        },\n        color: selectedMuscles.includes('Triceps') ? 'steelblue' : 'coral'\n      }), _jsx(Button, {\n        title: \"Quads\",\n        onPress: function onPress() {\n          return handleMuscleSelection('Quads');\n        },\n        color: selectedMuscles.includes('Quads') ? 'steelblue' : 'chartreuse'\n      }), _jsx(Button, {\n        title: \"Shoulders\",\n        onPress: function onPress() {\n          return handleMuscleSelection('Shoulders');\n        },\n        color: selectedMuscles.includes('Shoulders') ? 'steelblue' : 'gold'\n      }), _jsx(Button, {\n        title: \"Abs\",\n        onPress: function onPress() {\n          return handleMuscleSelection('Abs');\n        },\n        color: selectedMuscles.includes('Abs') ? 'steelblue' : 'pink'\n      }), _jsx(Button, {\n        title: \"Calves\",\n        onPress: function onPress() {\n          return handleMuscleSelection('Calves');\n        },\n        color: selectedMuscles.includes('Calves') ? 'steelblue' : 'goldenrod'\n      })]\n    }), _jsx(Button, {\n      title: \"Confirm Selection\",\n      onPress: handleConfirmation\n    }), confirmedMuscles.length > 0 && _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Confirmed Muscles:\"\n      }), confirmedMuscles.map(function (muscle, index) {\n        return _jsx(Text, {\n          children: muscle\n        }, index);\n      })]\n    })]\n  });\n};\nexport default MuscleSelect;","map":{"version":3,"names":["React","useState","View","Text","Button","Image","TouchableOpacity","useNavigation","jsx","_jsx","jsxs","_jsxs","MuscleSelect","_ref","route","_useState","_useState2","_slicedToArray","selectedMuscles","setSelectedMuscles","_useState3","_useState4","confirmedMuscles","setConfirmedMuscles","navigation","liftingLevel","params","handleMuscleSelection","muscle","prevState","includes","filter","item","concat","_toConsumableArray","handleConfirmation","console","log","navigate","style","flex","justifyContent","alignItems","children","source","require","width","height","resizeMode","title","onPress","color","length","map","index"],"sources":["/Users/saranramesh/PatriotHacks23-Gym-App/src/screens/MuscleSelect.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, Button, Image, TouchableOpacity } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\n\n\nconst MuscleSelect = ({ route }) => {\n  const [selectedMuscles, setSelectedMuscles] = useState([]);\n  const [confirmedMuscles, setConfirmedMuscles] = useState([]);\n  const navigation = useNavigation(); // Access navigation\n  const { liftingLevel } = route.params;\n\n\n\n  const handleMuscleSelection = (muscle) => {\n    setSelectedMuscles(prevState => {\n      if (prevState.includes(muscle)) {\n        return prevState.filter(item => item !== muscle);\n      } else {\n        return [...prevState, muscle];\n      }\n    });\n  };\n\n  const handleConfirmation = () => {\n    setConfirmedMuscles([...selectedMuscles]);\n    setSelectedMuscles([]);\n    console.log('Confirmed Muscles:', selectedMuscles);\n    console.log('Lifting Level:',liftingLevel);\n    navigation.navigate('DaysScreen', { selectedMuscles, liftingLevel });\n  };\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Select the muscles you want to grow:</Text>\n\n      <Image\n        source={require('../../assets/mmimwithback.png')} // Replace with actual image path\n        style={{ width: '50%', height: '50%' }} // Adjust width and height as needed\n        resizeMode=\"contain\"\n      />\n\n      <View>\n        <Button\n          title=\"Chest\"\n          onPress={() => handleMuscleSelection('Chest')}\n          color={selectedMuscles.includes('Chest') ? 'steelblue' : 'blue'} // Change color based on selection\n        />\n        <Button\n          title=\"Back\"\n          onPress={() => handleMuscleSelection('Back')}\n          color={selectedMuscles.includes('Back') ? 'steelblue' : 'darkolivegreen'} // Change color based on selection\n        />\n        <Button\n          title=\"Biceps\"\n          onPress={() => handleMuscleSelection('Biceps')}\n          color={selectedMuscles.includes('Biceps') ? 'steelblue' : 'purple'} // Change color based on selection\n        />\n        <Button\n          title=\"Triceps\"\n          onPress={() => handleMuscleSelection('Triceps')}\n          color={selectedMuscles.includes('Triceps') ? 'steelblue' : 'coral'} // Change color based on selection\n        />\n        <Button\n          title=\"Quads\"\n          onPress={() => handleMuscleSelection('Quads')}\n          color={selectedMuscles.includes('Quads') ? 'steelblue' : 'chartreuse'} // Change color based on selection\n        />\n        <Button\n          title=\"Shoulders\"\n          onPress={() => handleMuscleSelection('Shoulders')}\n          color={selectedMuscles.includes('Shoulders') ? 'steelblue' : 'gold'} // Change color based on selection\n        />\n        <Button\n          title=\"Abs\"\n          onPress={() => handleMuscleSelection('Abs')}\n          color={selectedMuscles.includes('Abs') ? 'steelblue' : 'pink'} // Change color based on selection\n        />\n        <Button\n          title=\"Calves\"\n          onPress={() => handleMuscleSelection('Calves')}\n          color={selectedMuscles.includes('Calves') ? 'steelblue' : 'goldenrod'} // Change color based on selection\n        />\n      </View>\n\n      <Button title=\"Confirm Selection\" onPress={handleConfirmation} />\n\n      {confirmedMuscles.length > 0 && (\n        <View>\n          <Text>Confirmed Muscles:</Text>\n          {confirmedMuscles.map((muscle, index) => (\n            <Text key={index}>{muscle}</Text>\n          ))}\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default MuscleSelect;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}